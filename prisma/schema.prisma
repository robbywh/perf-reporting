generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeaveType {
  half_day_before_break
  half_day_after_break
  full_day
}

model Role {
  id    String @id @db.VarChar(25)
  name  String @db.VarChar(50)
  users User[]

  @@map("role")
}

model Organization {
  id                      String                    @id @db.VarChar(25)
  name                    String                    @db.VarChar(100)
  userOrganizations       UserOrganization[]
  sprints                 Sprint[]
  engineerOrganizations   EngineerOrganization[]
  reviewerOrganizations   ReviewerOrganization[]
  statuses                Status[]
  settings                Setting[]

  @@map("organization")
}

model User {
  id                String              @id @db.VarChar(36)
  username          String              @db.VarChar(36)
  roleId            String              @map("role_id") @db.VarChar(25)
  engineerId        Int?                @unique @map("engineer_id")
  engineer          Engineer?           @relation(fields: [engineerId], references: [id])
  role              Role                @relation(fields: [roleId], references: [id])
  userOrganizations UserOrganization[]

  @@map("user")
}

model UserOrganization {
  userId         String       @map("user_id") @db.VarChar(36)
  organizationId String       @map("organization_id") @db.VarChar(25)
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
  @@map("user_organization")
}

model Setting {
  id             Int          @id @default(autoincrement())
  param          String       @db.VarChar(100)
  value          String       @db.Text
  organizationId String       @map("organization_id") @db.VarChar(25)
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([param, organizationId])
  @@map("setting")
}

model Category {
  id    String @id @db.Char(36)
  name  String @db.VarChar(25)
  tasks Task[]

  @@map("category")
}

model Status {
  id             String       @id @db.VarChar(25)
  name           String       @db.VarChar(25)
  organizationId String       @map("organization_id") @db.VarChar(25)
  organization   Organization @relation(fields: [organizationId], references: [id])
  tasks          Task[]

  @@unique([name, organizationId])
  @@map("status")
}

model Sprint {
  id              String           @id @db.VarChar(25)
  name            String           @db.VarChar(36)
  startDate       DateTime         @map("start_date")
  endDate         DateTime         @map("end_date")
  organizationId  String           @map("organization_id") @db.VarChar(25)
  organization    Organization     @relation(fields: [organizationId], references: [id])
  sprintEngineers SprintEngineer[]
  sprintReviewers SprintReviewer[]
  sprintGitlab    SprintGitlab[]
  tasks           Task[]

  @@map("sprint")
}

model Task {
  id           String         @db.VarChar(25)
  name         String         @db.VarChar(255)
  sprintId     String         @map("sprint_id") @db.VarChar(25)
  statusId     String?        @map("status_id") @db.VarChar(25)
  categoryId   String?        @map("category_id") @db.VarChar(36)
  parentTaskId String?        @map("parent_task_id") @db.VarChar(25)
  storyPoint   Decimal?       @map("story_point") @db.Decimal
  category     Category?      @relation(fields: [categoryId], references: [id])
  sprint       Sprint         @relation(fields: [sprintId], references: [id])
  status       Status?        @relation(fields: [statusId], references: [id])
  assignees    TaskAssignee[]
  taskTags     TaskTag[]
  reviewers    TaskReviewer[]
  
  @@id([id, sprintId])
  @@index([sprintId])
  @@index([sprintId, statusId])
  @@map("task")
}

model TaskTag {
  taskId    String @map("task_id") @db.VarChar(25)
  tagId     String @map("tag_id") @db.VarChar(25)
  sprintId  String @map("sprint_id") @db.VarChar(25)
  tag       Tag    @relation(fields: [tagId], references: [id])
  task      Task   @relation(fields: [taskId, sprintId], references: [id, sprintId])

  @@id([taskId, tagId, sprintId])
  @@index([taskId, sprintId])
  @@index([sprintId])
  @@map("task_tag")
}

model TaskAssignee {
  taskId     String   @map("task_id") @db.VarChar(25)
  engineerId Int      @map("engineer_id")
  sprintId   String   @map("sprint_id") @db.VarChar(25)
  engineer   Engineer @relation(fields: [engineerId], references: [id])
  task       Task     @relation(fields: [taskId, sprintId], references: [id, sprintId])

  @@id([taskId, engineerId, sprintId])
  @@index([engineerId, sprintId])
  @@index([sprintId])
  @@map("task_assignee")
}

model Tag {
  id       String    @id @db.VarChar(25)
  name     String    @unique @db.VarChar(25)
  taskTags TaskTag[]

  @@map("tag")
}

model Engineer {
  id                      Int                       @id
  name                    String                    @db.VarChar(50)
  jobLevelId              String                    @map("job_level_id") @db.VarChar(25)
  gitlabUserId            Int?                      @map("gitlab_user_id")
  email                   String?                   @db.VarChar(50)
  jobLevel                JobLevel                  @relation(fields: [jobLevelId], references: [id])
  engineerOrganizations   EngineerOrganization[]
  leaves                  Leave[]
  sprintEngineers         SprintEngineer[]
  sprintGitlab            SprintGitlab[]
  assignments             TaskAssignee[]
  user                    User?

  @@map("engineer")
}

model JobLevel {
  id         String     @id @db.VarChar(25)
  name       String     @db.VarChar(50)
  baseline   Decimal    @db.Decimal
  target     Decimal    @db.Decimal
  baselineCh Decimal?   @map("baseline_ch") @db.Decimal
  targetCh   Decimal?   @map("target_ch") @db.Decimal
  engineers  Engineer[]

  @@map("job_level")
}

model SprintEngineer {
  sprintId       String   @map("sprint_id") @db.VarChar(25)
  engineerId     Int      @map("engineer_id")
  jobLevelId     String?  @map("job_level_id") @db.VarChar(25)
  storyPoints    Decimal? @default(0) @map("story_points") @db.Decimal
  baseline       Decimal? @db.Decimal
  target         Decimal? @db.Decimal
  codingHours    Decimal? @default(0) @map("coding_hours") @db.Decimal
  baselineCh     Decimal? @map("baseline_ch") @db.Decimal
  targetCh       Decimal? @map("target_ch") @db.Decimal
  codingHoursUrl String?  @map("coding_hours_url") @db.VarChar(255)
  mergedCount    Int?     @map("merged_count")
  engineer       Engineer @relation(fields: [engineerId], references: [id])
  sprint         Sprint   @relation(fields: [sprintId], references: [id])

  @@id([sprintId, engineerId])
  @@map("sprint_engineer")
}

model Leave {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(50)
  date        DateTime
  engineerId  Int      @map("engineer_id")
  engineer    Engineer @relation(fields: [engineerId], references: [id])
  type        LeaveType

  @@map("leave")
}

model PublicHoliday {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(50)
  date        DateTime

  @@map("public_holiday")
}

model Reviewer {
  id                      Int                       @id
  name                    String                    @db.VarChar(50)
  email                   String?                   @db.VarChar(50)
  reviewerOrganizations   ReviewerOrganization[]
  taskReviewers           TaskReviewer[]
  sprintReviewers         SprintReviewer[]

  @@map("reviewer")
}

model TaskReviewer{
  taskId     String   @map("task_id") @db.VarChar(25)
  reviewerId Int      @map("reviewer_id")
  sprintId   String   @map("sprint_id") @db.VarChar(25)
  reviewer   Reviewer @relation(fields: [reviewerId], references: [id])
  task       Task     @relation(fields: [taskId, sprintId], references: [id, sprintId])

  @@id([taskId, reviewerId, sprintId])
  @@map("task_reviewer")
}

model SprintReviewer {
  sprintId       String   @map("sprint_id") @db.VarChar(25)
  reviewerId     Int      @map("reviewer_id")
  taskCount      Int?     @map("task_count")
  scenarioCount  Int?     @map("scenario_count")
  rejectedCount  Int?     @map("rejected_count")
  supportedCount Int?     @map("supported_count")
  reviewer       Reviewer @relation(fields: [reviewerId], references: [id])
  sprint         Sprint   @relation(fields: [sprintId], references: [id])

  @@id([sprintId, reviewerId])
  @@map("sprint_reviewer")
}

model Gitlab {
  id           Int            @id
  title        String         @db.VarChar(255)
  sprintGitlab SprintGitlab[]

  @@map("gitlab")
}

model EngineerOrganization {
  engineerId       Int          @map("engineer_id")
  organizationId   String       @map("organization_id") @db.VarChar(25)
  engineer         Engineer     @relation(fields: [engineerId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])

  @@id([engineerId, organizationId])
  @@map("engineer_organization")
}

model ReviewerOrganization {
  reviewerId       Int          @map("reviewer_id")
  organizationId   String       @map("organization_id") @db.VarChar(25)
  reviewer         Reviewer     @relation(fields: [reviewerId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])

  @@id([reviewerId, organizationId])
  @@map("reviewer_organization")
}

model SprintGitlab {
  gitlabId   Int      @map("gitlab_id")
  sprintId   String   @map("sprint_id") @db.VarChar(25)
  engineerId Int      @map("engineer_id")
  gitlab     Gitlab   @relation(fields: [gitlabId], references: [id])
  sprint     Sprint   @relation(fields: [sprintId], references: [id])
  engineer   Engineer @relation(fields: [engineerId], references: [id])

  @@id([gitlabId, sprintId, engineerId])
  @@map("sprint_gitlab")
}
