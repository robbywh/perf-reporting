// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @db.VarChar(25)
  name String @db.VarChar(50)
  
  users User[]
  @@map("role") 
}

model User {
  id       String @id @db.VarChar(36)
  username String @db.VarChar(36)
  roleId   String @db.VarChar(25) @map("role_id")
  engineerId  Int? @db.Integer @map("engineer_id") @unique

  engineer  Engineer? @relation(fields: [engineerId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  @@map("user") 
}

model Category {
  id   String @id @db.Char(36)
  name String @db.VarChar(25)
  
  tasks Task[]
  @@map("category") 
}

model Status {
  id   String @id @db.VarChar(25)
  name String @db.VarChar(25) @unique
  
  tasks Task[]
  @@map("status") 
}

model Sprint {
  id        String   @id @db.VarChar(25)
  name      String   @db.VarChar(36)
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  
  tasks      Task[]
  sprintEngineers  SprintEngineer[]
  @@map("sprint") 
}

model Task {
  id          String  @id @db.VarChar(25)
  name        String  @db.VarChar(255)
  sprintId    String  @db.VarChar(25) @map("sprint_id")
  statusId    String?  @db.VarChar(25) @map("status_id")
  categoryId  String?  @db.VarChar(36) @map("category_id")
  parentTaskId String? @db.VarChar(25) @map("parent_task_id")
  storyPoint  Decimal? @db.Decimal @map("story_point")

  sprint   Sprint @relation(fields: [sprintId], references: [id])
  status   Status? @relation(fields: [statusId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  
  taskTags     TaskTag[]
  assignees    TaskAssignee[]
  @@map("task") 
}

model TaskTag {
  taskId String @db.VarChar(25) @map("task_id")
  tagId  String  @db.VarChar(25) @map("tag_id")
  
  task Task @relation(fields: [taskId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])
  
  @@id([taskId, tagId])
  @@map("task_tag") 
}

model TaskAssignee {
  taskId      String @db.VarChar(25) @map("task_id")
  engineerId  Int    @db.Integer @map("engineer_id")
  task      Task    @relation(fields: [taskId], references: [id])
  engineer  Engineer @relation(fields: [engineerId], references: [id])
  
  @@id([taskId, engineerId])
  @@map("task_assignee") 
}

model Tag {
  id   String @id @db.VarChar(25)
  name String @db.VarChar(25) @unique
  
  taskTags TaskTag[]
  @@map("tag") 
}

model Engineer {
  id         Int     @id @db.Integer
  name       String  @db.VarChar(50)
  email      String?  @db.VarChar(50)
  jobLevelId String  @db.VarChar(25) @map("job_level_id")
  gitlabUserId Int?   @db.Integer @map("gitlab_user_id")
  
  jobLevel    JobLevel  @relation(fields: [jobLevelId], references: [id])
  assignments TaskAssignee[]
  sprintEngineers  SprintEngineer[]
  leaves      Leave[]
  user User?
  @@map("engineer") 
}

model JobLevel {
  id     String @id @db.VarChar(25)
  name   String @db.VarChar(50)
  baseline Decimal @db.Decimal
  target   Decimal @db.Decimal
  baselineCh Decimal? @db.Decimal @map("baseline_ch")
  targetCh   Decimal? @db.Decimal @map("target_ch")
  
  engineers Engineer[]
  @@map("job_level") 
}

model SprintEngineer {
  sprintId    String  @db.VarChar(25) @map("sprint_id")
  engineerId  Int     @db.Integer @map("engineer_id")
  jobLevelId  String?  @db.VarChar(25) @map("job_level_id")
  storyPoints Decimal? @db.Decimal @map("story_points") @default(0)
  baseline    Decimal? @db.Decimal
  target      Decimal? @db.Decimal
  codingHours Decimal? @db.Decimal @map("coding_hours") @default(0)
  baselineCh Decimal? @db.Decimal @map("baseline_ch")
  targetCh   Decimal? @db.Decimal @map("target_ch")
  codingHoursUrl String? @db.VarChar(255) @map("coding_hours_url")
  mergedCount Int? @db.Integer @map("merged_count")

  
  sprint   Sprint   @relation(fields: [sprintId], references: [id])
  engineer Engineer @relation(fields: [engineerId], references: [id])

  @@id([sprintId, engineerId]) // Composite Primary Key
  @@map("sprint_engineer") 
}

model Leave {
  id          Int      @id @default(autoincrement()) @db.Integer
  description String @db.VarChar(50)
  date       DateTime @map("date")
  engineerId Int      @db.Integer @map("engineer_id")
  
  engineer Engineer @relation(fields: [engineerId], references: [id])
  @@map("leave") 
}

model PublicHoliday {
  id          Int      @id @default(autoincrement()) @db.Integer
  description String  @db.VarChar(50)
  date        DateTime @map("date")
  @@map("public_holiday") 
}